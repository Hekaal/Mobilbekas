# -*- coding: utf-8 -*-
"""Mobilbekas

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oTJa3uvGuWdgeOvlP-u_IQ4uTozBLftp
"""

#!pip install streamlit
#!pip install catboost

import streamlit as st
import pandas as pd
import numpy as np
import pickle
from catboost import CatBoostRegressor
from PIL import Image

# Load model
try:
    with open("catboost_model_quikr.pkl", "rb") as f:
        model = pickle.load(f)
except FileNotFoundError:
    st.error("Error: 'catboost_model_quikr.pkl' not found. Please ensure the model file is in the same directory.")
    st.stop() # Stop execution if model isn't found
except Exception as e:
    st.error(f"An error occurred while loading the model: {e}")
    st.stop()

# Load model
try:
    with open("catboost_model_quikr.pkl", "rb") as f:
        model = pickle.load(f)
except FileNotFoundError:
    st.error("Error: 'catboost_model_quikr.pkl' not found. Please ensure the model file is in the same directory.")
    st.stop() # Stop execution if model isn't found
except Exception as e:
    st.error(f"An error occurred while loading the model: {e}")
    st.stop()

# Konfigurasi halaman
st.set_page_config(page_title="Prediksi Harga Mobil Bekas", layout="centered", page_icon="üöó")
st.markdown("""
    <style>
    .main {background-color: #f9f9f9;}
    .stButton button {background-color: #007bff; color: white; padding: 0.6em 1.2em; border-radius: 8px;}
    .stButton button:hover {background-color: #0056b3;}
    .stSelectbox, .stNumberInput, .stTextInput, .stSlider {
        background-color: #ffffff;
        border-radius: 10px;
        padding: 1em;
        margin-bottom: 1em; /* Add some space below inputs */
    }
    </style>
""", unsafe_allow_html=True)

# Judul
st.title("Prediksi Harga Mobil Bekas")
st.markdown("""
Gunakan aplikasi ini untuk memprediksi harga mobil bekas berdasarkan data kendaraan Anda.
""")


# Daftar nama mobil dan jenis bahan bakar yang valid (sesuaikan jika perlu dari data Anda)
# Untuk demo, ini bisa diperluas atau diambil dari model jika Anda punya daftar uniknya
car_names = [
    'Audi A6', 'BMW 5 Series', 'Chevrolet Beat', 'Datsun GO', 'Fiat Punto',
    'Force Gurkha', 'Ford Ecosport', 'Hindustan Ambassador', 'Honda City', 'Hyundai i20',
    'Jeep Compass', 'Mahindra XUV500', 'Maruti Swift', 'Mercedes C-Class', 'Mitsubishi Pajero',
    'Nissan Micra', 'Renault Kwid', 'Skoda Rapid', 'Tata Nano', 'Toyota Fortuner',
    'Volkswagen Polo', 'Daihatsu Ayla', 'Wuling Confero', 'Mazda CX-5', 'Chery QQ',
    'Suzuki Karimun', 'Hyundai Creta', 'DFSK Glory' # Added from training script's lists
]

# Assuming 'Petrol', 'Diesel', 'Hybrid' are common fuel types.
# This list could be dynamically populated from the training data unique values if known.
common_fuel_types = ['Petrol', 'Diesel', 'Hybrid', 'Gasoline', 'Electric']

# Common colors - expand this list based on your dataset's unique colors
common_colors = [
    'White', 'Black', 'Silver', 'Grey', 'Red', 'Blue', 'Brown', 'Green', 'Orange', 'Yellow', 'Gold', 'Purple'
]

# Common transmission types - expand this list based on your dataset's unique transmissions
common_transmission_types = [
    'Manual', 'Automatic', 'CVT', 'AMT'
]

# Common variants - this is highly specific to models, so a simple list is a placeholder.
# In a real app, this might be dynamically loaded based on selected 'Merek' and 'Model'.
common_variants = [
    'Standard', 'Luxury', 'Sport', 'Hybrid', 'GLX', 'G', 'E', 'S', 'SE', 'LE', 'X', 'V', 'R', 'Limited'
]


# Layout Streamlit
# st.set_page_config(page_title="Prediksi Harga Mobil Bekas", layout="centered") # Already set above
st.title("üöó Prediksi Harga Mobil Bekas")
st.markdown("Isi detail mobil di bawah untuk mendapatkan estimasi harga.")

# Input pengguna
# Name here corresponds to 'model' in training script
name_input = st.selectbox("Pilih Model Mobil", sorted(list(set(car_names))))

# Extract company (merek) from model name or let user input if preferred.
# For simplicity, if model is "Audi A6", company is "Audi"
company_input = st.text_input("Merek / Brand", value=name_input.split()[0] if name_input else "Unknown")


fuel_type_input = st.selectbox("Tipe Bahan Bakar", sorted(common_fuel_types))
age_input = st.slider("Umur Mobil (tahun)", 0, 30, 5) # Corresponds to 'age'
kms_driven_input = st.number_input("Jarak Tempuh (dalam KM)", min_value=0, step=1000) # Corresponds to 'jarak_tempuh'

# New inputs
variant_input = st.selectbox("Varian Mobil", sorted(common_variants)) # Corresponds to 'varian'
color_input = st.selectbox("Warna Mobil", sorted(common_colors)) # Corresponds to 'warna'
transmission_type_input = st.selectbox("Tipe Transmisi", sorted(common_transmission_types)) # Corresponds to 'transmisi'


# Validasi bahan bakar tidak umum (optional, if you have this data for every car_name)
# For now, let's remove this or keep it very general as we don't have valid_fuels_per_car for all new models.
# if fuel_type_input not in valid_fuels_per_car.get(name_input, []):
#     st.warning(f"‚ö†Ô∏è Kombinasi {name_input} dan {fuel_type_input} mungkin tidak umum.")

# --- Feature Engineering to match the model's training script ---
# These calculations must mirror the training script exactly.

# company_model
company_model_feature = f"{company_input}_{name_input}"

# segment (based on estimated price, as actual price is unknown for prediction)
base_prices = {
    'Audi A6': 650_000_000, 'BMW 5 Series': 700_000_000, 'Mercedes C-Class': 750_000_000,
    'Toyota Fortuner': 350_000_000, 'Honda City': 300_000_000, 'Hyundai i20': 250_000_000,
    'Maruti Swift': 120_000_000, 'Tata Nano': 110_000_000, 'Daihatsu Ayla': 130_000_000,
    'Wuling Confero': 150_000_000, 'Hyundai Creta': 320_000_000, 'Suzuki Karimun': 90_000_000,
    'DFSK Glory': 200_000_000, 'Volkswagen Polo': 280_000_000, 'Mazda CX-5': 450_000_000
}
estimated_price = base_prices.get(name_input, 200_000_000) # Default if car not in list
segment_bins = [0, 80e6, 150e6, 300e6, 500e6, 1e9, 3e9]
segment_labels = ['ultra_low', 'low', 'mid_low', 'mid_high', 'high', 'lux']
segment_feature = pd.cut([estimated_price], bins=segment_bins, labels=segment_labels, right=False)[0]


# fuel_age
fuel_age_feature = f"{fuel_type_input}_{age_input}"

# company_segment
company_segment_feature = f"{company_model_feature}_{segment_feature}"

# log_km
log_km_feature = np.log1p(kms_driven_input)

# log_km_per_year
log_km_per_year_feature = np.log1p(kms_driven_input / max(age_input, 1))

# brand_category (based on model name)
lux_names = ['BMW 5 Series', 'Mercedes C-Class', 'Audi A6', 'Land Rover Evoque']
mid_names = ['Toyota Fortuner', 'Honda City', 'Hyundai Creta', 'Volkswagen Polo', 'Mazda CX-5']
budget_names = ['Daihatsu Ayla', 'Suzuki Karimun', 'Wuling Confero', 'Tata Nano', 'Chery QQ', 'DFSK Glory']

if name_input in lux_names:
    brand_category_feature = 'luxury'
elif name_input in mid_names:
    brand_category_feature = 'midrange'
elif name_input in budget_names:
    brand_category_feature = 'budget'
else:
    brand_category_feature = 'general'

# Flags tambahan
is_premium_feature = int(brand_category_feature == 'luxury' and age_input <= 3)
is_high_value_feature = int(brand_category_feature in ['luxury', 'midrange'] and age_input <= 5 and kms_driven_input <= 60000)
is_low_budget_feature = int(brand_category_feature == 'budget' and age_input >= 10 and kms_driven_input >= 120000)


# DataFrame input for prediction (ensure column names and order match model training)
features_df = pd.DataFrame([{
    'company_model': company_model_feature,
    'tipe_bahan_bakar': fuel_type_input,
    'log_km': log_km_feature,
    'age': age_input,
    'segment': segment_feature,
    'fuel_age': fuel_age_feature,
    'company_segment': company_segment_feature,
    'log_km_per_year': log_km_per_year_feature,
    'brand_category': brand_category_feature,
    'is_premium': is_premium_feature,
    'is_high_value': is_high_value_feature,
    'is_low_budget': is_low_budget_feature,
    'transmisi': transmission_type_input, # New feature
    'warna': color_input,                # New feature
    'varian': variant_input               # New feature
}])

# Prediksi harga
if st.button("Prediksi Harga"):
    try:
        pred_log = model.predict(features_df)[0]
        pred_rp = np.expm1(pred_log)
        st.subheader(f"üí∞ Estimasi Harga: Rp {pred_rp:,.0f}")
        st.success("Prediksi berhasil!")
    except Exception as e:
        st.error(f"Terjadi kesalahan saat melakukan prediksi: {e}")
        st.info("Pastikan semua input sudah diisi dengan benar dan model sudah dimuat.")

